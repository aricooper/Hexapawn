/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hexapawn;

import java.awt.Graphics;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;

/**
 *
 * @author Ari
 */
public class Panel extends javax.swing.JPanel {

    public NaryTree aTree;
    public BufferedImage black;
    public BufferedImage white;
    public Rectangle r;
    private int spacerH;
    private int spacerW;
    boolean pressed, dragging;
    int turn = -1; // 1 = white, player, -1 = black, ai
    int team = -1;
    boolean gameover;
    ArrayList<Board> losingMovesList = new ArrayList<Board>();

    int dragX, dragY;
    int blackWin, whiteWin = 0;

    private int train = 40;
    private boolean learning;

    public void LoadImagesApp() {
        try {
            black = ImageIO.read(new File("C:\\Users\\Ari\\Documents\\'16\\CS\\Hexapawn\\black.png"));
        } catch (IOException e) {
            System.out.println("Nothing");
        }
        try {
            white = ImageIO.read(new File("C:\\Users\\Ari\\Documents\\'16\\CS\\Hexapawn\\white.png"));
        } catch (IOException e) {
            System.out.println("Nothing");
        }
    }

    private void constants() {
        X = r.x;
        Y = r.y;
        width = r.width - 175;
        height = r.height - 175;
    }

    public Panel() {
        initComponents();
        setVisible(true);
//        setSize(800,800);
        LoadImagesApp();

        start();
    }
    int X, Y, width, height;

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        r = this.getVisibleRect();
        constants();
        paintPawn(g);
        g.drawRect(X, Y, width, height);
        spacerH = ((height) / Global.GAMESIZE);
        spacerW = ((width) / Global.GAMESIZE);
        for (int i = 1; i <= Global.GAMESIZE; i++) {
            for (int j = 1; j <= Global.GAMESIZE; j++) {
                if (i != Global.GAMESIZE && j != Global.GAMESIZE) {
                    g.drawLine(spacerW * i, Y, spacerW * i, height);
                    g.drawLine(X, spacerH * j, width, spacerH * j);
                }
                if (aTree.getCurrBoard()[i - 1][j - 1] == 1) {
                    g.drawImage(white, spacerW * j - spacerW + 200 / Global.GAMESIZE, spacerH * i - spacerH + 100 / Global.GAMESIZE, 150 / Global.GAMESIZE, 300 / Global.GAMESIZE, this);
                } else if (aTree.getCurrBoard()[i - 1][j - 1] == -1) {
                    g.drawImage(black, spacerW * j - spacerW + 200 / Global.GAMESIZE, spacerH * i - spacerH + 100 / Global.GAMESIZE, 150 / Global.GAMESIZE, 300 / Global.GAMESIZE, this);
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        newGameButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        blackWins = new javax.swing.JLabel();
        whiteWins = new javax.swing.JLabel();
        box = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        learnButton = new javax.swing.JButton();
        learnSlider = new javax.swing.JSlider();
        saveButton = new javax.swing.JButton();
        loadButton = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        teamToggle = new javax.swing.JToggleButton();
        jLabel5 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(0, 153, 204));
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });

        newGameButton.setBackground(new java.awt.Color(204, 0, 51));
        newGameButton.setFont(new java.awt.Font("Stencil", 0, 36)); // NOI18N
        newGameButton.setForeground(new java.awt.Color(255, 255, 255));
        newGameButton.setText("New Game");
        newGameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newGameButtonActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Stencil", 0, 24)); // NOI18N
        jLabel2.setText("Black Wins :");

        jLabel3.setFont(new java.awt.Font("Stencil", 0, 24)); // NOI18N
        jLabel3.setText("White Wins :");

        blackWins.setFont(new java.awt.Font("Stencil", 0, 24)); // NOI18N
        blackWins.setText("0");

        whiteWins.setFont(new java.awt.Font("Stencil", 0, 24)); // NOI18N
        whiteWins.setText("0");

        box.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "3", "4", "5", "6" }));
        box.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Stencil", 0, 18)); // NOI18N
        jLabel4.setText("Size :");

        learnButton.setText("LEARN");
        learnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                learnButtonActionPerformed(evt);
            }
        });

        learnSlider.setForeground(new java.awt.Color(0, 0, 0));
        learnSlider.setMajorTickSpacing(1000);
        learnSlider.setMaximum(10000);
        learnSlider.setMinorTickSpacing(500);
        learnSlider.setOrientation(javax.swing.JSlider.VERTICAL);
        learnSlider.setPaintLabels(true);
        learnSlider.setSnapToTicks(true);
        learnSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                learnSliderStateChanged(evt);
            }
        });

        saveButton.setText("SAVE");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        loadButton.setText("LOAD");
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });

        teamToggle.setText("BLACK");
        teamToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                teamToggleActionPerformed(evt);
            }
        });

        jLabel5.setText("FIRST   MOVE:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(209, 209, 209)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(teamToggle, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(48, 48, 48)
                        .addComponent(newGameButton, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 233, Short.MAX_VALUE)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 7, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(saveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(learnSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(loadButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(40, 40, 40))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(learnButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(box, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(28, 28, 28))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(blackWins))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(whiteWins)))
                        .addGap(25, 25, 25))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(box, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addComponent(learnButton)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(learnSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(loadButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(blackWins))
                                .addGap(58, 58, 58))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 80, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(whiteWins))
                                .addGap(16, 16, 16))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(teamToggle))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(6, 6, 6)))
                                .addComponent(newGameButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(91, 91, 91))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        fromRow = 0;
        fromCol = 0;
        int x = evt.getX();
        int y = evt.getY();
        findPawn(x, y, true);

    }//GEN-LAST:event_formMousePressed

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased

        int x = evt.getX();
        int y = evt.getY();
        findPawn(x, y, false);
        repaint();
    }//GEN-LAST:event_formMouseReleased

    private void newGameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newGameButtonActionPerformed
        start();

        repaint();
        System.out.println("Losing Moves: = " + losingMovesList.size());
        whiteWins.setText("" + whiteWin);
        blackWins.setText("" + blackWin);
    }//GEN-LAST:event_newGameButtonActionPerformed

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        dragX = evt.getX() - 25;
        dragY = evt.getY() - 25;
        repaint();
//        System.out.println("y = " + dragY);
//        System.out.println("x = " + dragX);


    }//GEN-LAST:event_formMouseDragged

    private void boxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boxActionPerformed
        Global.setGAMESIZE(Integer.parseInt(box.getItemAt(box.getSelectedIndex())));
        losingMovesList.clear();
        start();
        repaint();
    }//GEN-LAST:event_boxActionPerformed

    private void learnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_learnButtonActionPerformed
        learn();
    }//GEN-LAST:event_learnButtonActionPerformed

    private void learnSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_learnSliderStateChanged
        train = learnSlider.getValue();
    }//GEN-LAST:event_learnSliderStateChanged

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        Global.setLosingList(losingMovesList);
        System.out.println("saved");
    }//GEN-LAST:event_saveButtonActionPerformed

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        losingMovesList = Global.getLosingList();
        System.out.println("loaded");
    }//GEN-LAST:event_loadButtonActionPerformed

    private void teamToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_teamToggleActionPerformed
        team = -team;
        if (team == 1) {
            teamToggle.setLabel("WHITE");
        } else {
            teamToggle.setLabel("BLACK");
        }
        start();
        repaint();
        System.out.println("Losing Moves: = " + losingMovesList.size());
        whiteWins.setText("" + whiteWin);
        blackWins.setText("" + blackWin);
    }//GEN-LAST:event_teamToggleActionPerformed

    private void start() {
        gameover = false;
        
        if (team == -1) {
            turn = -1;
            aTree = new NaryTree(new Board(), turn, false);
            aTree.addChildren(Global.MAXDEPTH);
            aiMove();
        }else {
            turn = 1;
            aTree = new NaryTree(new Board(), turn, false);
            aTree.addChildren(Global.MAXDEPTH);
        }
        
        whiteWins.setText("" + whiteWin);
        blackWins.setText("" + blackWin);
    }

    public void learn() {
        learning = true;
        for (int i = 0; i < train; i++) {
            start();
            playAGame();
//            System.out.println("gameover");
//            System.out.println("Losing Moves: = \n" + losingMovesList.toString());
        }
        System.out.println("learned");
        displayChart();
        learning = false;

    }

    public void displayChart() {
    }

    public void playAGame() {
        gameover = aTree.gameover;
        while (!gameover) {
//            System.out.println("turn");
            playTurn(minimaxMove());
        }
    }

    public Board minimaxMove() {
        return aTree.bestMove();

    }

    public void paintPawn(Graphics g) {
        if (dragging) {
            if (turn == 1) {
                g.drawImage(white, dragX, dragY, 50, 100, this);
            } else {
                g.drawImage(black, dragX, dragY, 50, 100, this);
            }
            repaint();
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel blackWins;
    private javax.swing.JComboBox<String> box;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JButton learnButton;
    private javax.swing.JSlider learnSlider;
    private javax.swing.JButton loadButton;
    private javax.swing.JButton newGameButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JToggleButton teamToggle;
    private javax.swing.JLabel whiteWins;
    // End of variables declaration//GEN-END:variables

    int fromRow, fromCol;

    private void findPawn(int x, int y, boolean pressed) {
//        System.out.println(aTree.turn);
        int col = (x - X) / spacerW;
        int row = (y - Y) / spacerH;
//        System.out.println("col = " + col);
//        System.out.println("row = " + row);
        if (pressed) {

            if (insideGame(col, row)) {
                if (aTree.getCurrBoard()[row][col] == aTree.turn) {
                    dragging = true;
                    fromRow = row;
                    fromCol = col;
                } else {
                    System.out.println("choose again");
                }
            }
        } else if (insideGame(col, row)) {
            dragging = false;
            Board newBoard = aTree.validMove(fromRow, fromCol, row, col);
            playTurn(newBoard);
        }
    }

    public void playTurn(Board newBoard) {
        gameover = aTree.gameover;

        if (!newBoard.isEqual(aTree.currentBoard)) {
            changeTurns();
            aTree = new NaryTree(newBoard, turn, gameover);
            repaint();
            if (gameover) {
                gameover();
                if (notArepeat()) {
                    losingMovesList.add(aBoard);
                }

            } else {

                aTree.addChildren(Global.MAXDEPTH);
//                System.out.println("" + aTree.toString());

                aiMove();
            }
        } else if (gameover) {
            aTree = new NaryTree(newBoard, turn, gameover);
            repaint();
            gameover();
            if (notArepeat()) {
                losingMovesList.add(aBoard);
            }

        }
    }

    public boolean notArepeat() {
        for (Board next : losingMovesList) {
            if (next.isEqual(aBoard)) {
                return false;
            }
        }
        return true;
    }

    public boolean insideGame(int col, int row) {
        if (col >= 0 && col < Global.GAMESIZE) {
            if (row >= 0 && row < Global.GAMESIZE) {
                return true;
            }
        }
        return false;
    }
    Board aBoard;

    public void aiMove() {
//        aBoard = aTree.aiRandomMove();
        Board lastBoard = aBoard;
        aBoard = aTree.aiMove(losingMovesList);
        if (!notArepeat()) {
//                    System.out.println("here");
            losingMovesList.add(lastBoard);
        }

        gameover = aTree.gameover;
        changeTurns();
        aTree = new NaryTree(aBoard, turn, gameover);
        repaint();
        if (gameover) {
            gameover();
        } else {
            aTree.addChildren(Global.MAXDEPTH);
//        System.out.println("" + aTree.toString());
        }
    }

    public void changeTurns() {
//        System.out.println("changed");
        turn = -turn;
    }

    public void gameover() {

        if (turn == -1) {
            if (!learning) {
//                JOptionPane.showMessageDialog(this, "White Wins");
                Object[] options = {"CONTINUE"};
                JOptionPane.showOptionDialog(this,
                        "WHITE WINS !!! ... PLAY AGAIN ???",
                        "GAMEOVER",
                        JOptionPane.YES_NO_CANCEL_OPTION,
                        JOptionPane.QUESTION_MESSAGE,
                        null,
                        options,
                        options[0]);
            }
            whiteWin++;
//                    turn = -turn;
//                System.out.println("White Wins");

        } else {
            if (!learning) {
                JOptionPane.showMessageDialog(this, "Black Wins");
            }
//                    JOptionPane.showOptionDialog(this,
//                            "BLACK WINS !!! ... PLAY AGAIN ???",
//                            "GAMEOVER",
//                            JOptionPane.YES_NO_CANCEL_OPTION,
//                            JOptionPane.QUESTION_MESSAGE,
//                            null,
//                            options,
//                            options[0]);
            blackWin++;
            turn = -turn;
//                System.out.println("Black Wins");
        }

    }

}
